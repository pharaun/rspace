use std::str::FromStr;
use asm::parse;
use asm::ast;

grammar;

match {
    r"(zero|ra|[sgtf]p|[tsax][0-9]+)"   => REG,
} else {
    r"-?[0-9]+"                         => NUM,
    r"0x[0-9A-F-a-f]+"                  => HEX,
    r"[0-9]+[BFbf]"                     => NUMLAB,
    r"[A-Za-z.]+"                       => STR,
    _
}

// number == digits + Ox{digits} (does not handle negative number) unsigned int32/64) (later can
//                              handle negative by converting it to 2's compat and  storing it as unsigned)
pub Number = { Dec, Hex };

Dec: u32 = <s:NUM> => u32::from_str(s).unwrap();
Hex: u32 = <s:HEX> => u32::from_str_radix(&s[2..], 16).unwrap();

// Register == letter + digits
pub Register: &'input str = {
    <n:Reg> => parse::map_reg(n),
};

Reg: &'input str = <s:REG> => s;


// args = register | number | csr | label
pub Arguments: ast::Args <'input> = {
    <n:Register> => ast::Args::Reg(n),
    <n:Number>   => ast::Args::Num(n),
    <n:LLabel>   => ast::Args::Lab(ast::Labels::NLabel(n)),
    <n:Str>      => {
        // Parse CSR else panic
        if parse::is_csr(n) {
            ast::Args::Csr(n)
        } else {
            ast::Args::Lab(ast::Labels::WLabel(n))
        }
    },
};

Str: &'input str = <s:STR> => s;
LLabel: &'input str = <s:NUMLAB> => s;
WLabel: &'input str = <s:STR> => s;

// [0-4] args
pub VecArgs: Vec<ast::Args <'input>> = {
    <Arguments*>
};

// Instruction == letter + .
Instruction: &'input str = <s:STR> => s;

// Non Instruction Labels
pub Label: ast::Labels <'input> = {
    <l:NUM> ":"     => ast::Labels::NLabel(l),
    <l:WLabel> ":"  => ast::Labels::WLabel(l),
};

// Asm Line = Instruction [0-4] args
// TODO:
//  gcc as assemblier uses a slightly different syntax:
//      - add x0, x1, x3
//      - lw x0, 0x0(x3)
//      - sw x0, 0x0(x3)
//      - csr{rw, rs, rc} a0, cycle, x0
//      - csr{rw, rs, rc}i a1, sscratch, 1
pub AsmLine: ast::AsmLine <'input> = {
    <l:Label> <i:Instruction> <v:VecArgs>  => ast::AsmLine::Lns(l, i, v),
    <i:Instruction> <v:VecArgs>            => ast::AsmLine::Ins(i, v),
    <l:Label>                              => ast::AsmLine::Lab(l),
};
